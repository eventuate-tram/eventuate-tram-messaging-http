buildscript {
    repositories {
        jcenter()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"

allprojects {
    group = "io.eventuate.messaging.http"
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/eventuateio-oss/eventuate-maven-release"
        }
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "PROXY_SERVICE_VERSION", version
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

    environment.put "DOCKER_IMAGE_TAG", dockerImageTag

    mysqlbinlog {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
    }

    proxyOnly {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        startedServices = ["proxy"]
    }

    proxiesOnly {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
        startedServices = ["proxy", "proxy-follower"]
    }

    publish {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-binlog.yml"]
    }
}

publishComposeBuild.dependsOn(":eventuate-tram-messaging-proxy-service:assemble")
